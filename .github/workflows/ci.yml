name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check C/C++ formatting
      run: make format-check

  build-and-test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          clang-format

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake ninja

    - name: Build with fetched dependencies (Unix)
      if: runner.os != 'Windows'
      run: make build-fetch

    - name: Build with fetched dependencies (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug \
          -DV4_LOCAL_PATH="" \
          -DV4FRONT_LOCAL_PATH="" \
          -DWITH_FILESYSTEM=ON
        cmake --build build -j

    - name: Run smoke tests (Unix)
      if: runner.os != 'Windows'
      run: make test

    - name: Run smoke tests (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: bash test_smoke.sh

    - name: Run unit tests (Unix)
      if: runner.os != 'Windows'
      run: make test-unit

    - name: Run unit tests (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: ./build/Debug/test_libv4repl.exe || ./build/test_libv4repl.exe
